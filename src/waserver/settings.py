# This file is part of Witness Angel Server
# SPDX-FileCopyrightText: Copyright Prolifik SARL
# SPDX-License-Identifier: GPL-2.0-or-later

"""
Django settings for watrustee project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from pathlib import Path

import os
import sys
from decouple import AutoConfig

executable_is_frozen = getattr(sys, "frozen", False)

if not executable_is_frozen:
    _parents = Path(__file__).resolve().parents  # handle several setup structures
    THIS_DIR = _parents[0]
    BASE_DIR = _parents[1]
    if not BASE_DIR.joinpath("settings.ini").exists():
        BASE_DIR = _parents[2]
    assert BASE_DIR.joinpath("settings.ini").exists(), BASE_DIR
else:
    BASE_DIR = Path(sys.executable).parent  # pragma: no cover
    THIS_DIR = BASE_DIR  # Find a way to place templates there...

config = AutoConfig(search_path=str(BASE_DIR))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", cast=str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool, default=False)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=lambda v: [s.strip() for s in v.split(",") if s.strip()], default=[])

# Application definition

INSTALLED_APPS = [
    "jsonrpc",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "waserver.apps.watrustee",
    "waserver.apps.wagateway",
    "waserver.apps.wasupport",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "waserver.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # Contains plain text templates, like `robots.txt`:
            THIS_DIR.joinpath("templates")
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "waserver.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        "ATOMIC_REQUESTS": False,  # IMPORTANT - prevents "database is locked" in sqlite
        "TEST": {"NAME": os.path.join(BASE_DIR, "test_db.sqlite3")},  # Necessary to have proper concurrency timeouts
        "OPTIONS": {
            "timeout": 20,  # Wait timeout for DB table locking, in seconds (seems broken in tests)
            # see also https://docs.python.org/3.7/library/sqlite3.html#sqlite3.connect
        },
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"


# Folder from crashdumps received by webservice
CRASHDUMPS_DIR = BASE_DIR.joinpath("crashdumps")
CRASHDUMPS_DIR.mkdir(exist_ok=True)


# Obsolete settings, just to satisfy PyInstaller
TEMPLATE_CONTEXT_PROCESSORS = []
TEMPLATE_LOADERS = []


# Security settings for prod
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", cast=bool, default=True)
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": "DEBUG", "handlers": ["console"]},
    "formatters": {
        "simple": {"format": "[%(name)s] %(asctime)s [%(levelname)s] %(message)s", "datefmt": "%Y-%m-%d %H:%M:%S"}
    },
    "handlers": {"console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "simple"}},
}

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "waserver.utils.ExtendedDRFJSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ]
}


try:
    from waserver_prod_settings import *
except ImportError:
    pass  # Dev mode?
